name: GCC Linux Build
on: [push, pull_request]

# Use custom shell with -l so .bash_profile is sourced
# without having to do it in manually every step
defaults:
  run:
    shell: bash -leo pipefail {0}

env:
  cache_key: gcc
  CC: gcc-10
  FC: gfortran-10
  CXX: g++-10

# A note on flushing Action cache and relevance to "cache_key" above.
# There is no way to flush the Action cache, and hence a number (#) is appended
# to the "cache_key" (gcc).
# If the dependencies change, increment this number and a new cache will be
# generated by the dependency build step "setup"
# There is a Github issue to force clear the cache.
# See discussion on:
# https://stackoverflow.com/questions/63521430/clear-cache-in-github-actions

# The jobs are split into:
# 1. a dependency build step (setup), and
# 2. a GSI-utils build step (gsi-utils)
# The setup is run once and the environment is cached,
# so each subsequent build of GSI-utils can reuse the cached dependencies to save time (and compute).

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Free up disk space
      - name: free-disk-spack
        run: |
          df -h
          sudo swapoff -a
          sudo rm -rf /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - name: checkout  # This is for getting spack.yaml
        uses: actions/checkout@v3
        with:
            path: gsi-utils

      # Cache spack, compiler and dependencies
      - name: cache-env
        id: cache-env
        uses: actions/cache@v3
        with:
          path: |
            spack
            ~/.spack
          key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('gsi-utils/ci/spack.yaml') }}

      # Install dependencies using Spack
      - name: install-dependencies-with-spack
        if: steps.cache-env.outputs.cache-hit != 'true'
        run: |
          git clone -c feature.manyFiles=true https://github.com/JCSDA/spack.git
          source spack/share/spack/setup-env.sh
          spack env create gsiutils-env gsi-utils/ci/spack.yaml
          spack env activate gsiutils-env
          spack external find
          spack add mpich@3.4.2
          spack concretize
          spack install -v --fail-fast --dirty
          spack clean --all

  gsi-monitor:
    needs: setup
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
            path: gsi-utils

      - name: cache-env
        id: cache-env
        uses: actions/cache@v3
        with:
          path: |
            spack
            ~/.spack
          key: spack-${{ runner.os }}-${{ env.cache_key }}-${{ hashFiles('gsi-utils/ci/spack.yaml') }}

      - name: build
        run: |
          source spack/share/spack/setup-env.sh
          spack env activate gsiutils-env
          export CC=mpicc
          export FC=mpif90
          cd gsi-utils
          mkdir -p build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=../install -DBUILD_UTIL_ALL=ON ..
          make -j2 VERBOSE=1
          make install
